[{"name":"class ElementsClassInspector : ClassInspector","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/index.html","searchKeys":["ElementsClassInspector","class ElementsClassInspector : ClassInspector","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector"]},{"name":"fun create(elements: Elements, types: Types): ClassInspector","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.Companion.create","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/-companion/create.html","searchKeys":["create","fun create(elements: Elements, types: Types): ClassInspector","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.Companion.create"]},{"name":"object Companion","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.Companion","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/-companion/index.html","searchKeys":["Companion","object Companion","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.Companion"]},{"name":"open override fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.containerData","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/container-data.html","searchKeys":["containerData","open override fun containerData(declarationContainer: ImmutableKmDeclarationContainer, className: ClassName, parentClassName: ClassName?): ContainerData","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.containerData"]},{"name":"open override fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.declarationContainerFor","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/declaration-container-for.html","searchKeys":["declarationContainerFor","open override fun declarationContainerFor(className: ClassName): ImmutableKmDeclarationContainer","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.declarationContainerFor"]},{"name":"open override fun enumEntry(enumClassName: ClassName, memberName: String): EnumEntryData","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.enumEntry","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/enum-entry.html","searchKeys":["enumEntry","open override fun enumEntry(enumClassName: ClassName, memberName: String): EnumEntryData","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.enumEntry"]},{"name":"open override fun isInterface(className: ClassName): Boolean","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.isInterface","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/is-interface.html","searchKeys":["isInterface","open override fun isInterface(className: ClassName): Boolean","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.isInterface"]},{"name":"open override fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.methodExists","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/method-exists.html","searchKeys":["methodExists","open override fun methodExists(className: ClassName, methodSignature: JvmMethodSignature): Boolean","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.methodExists"]},{"name":"open override val supportsNonRuntimeRetainedAnnotations: Boolean = true","description":"com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.supportsNonRuntimeRetainedAnnotations","location":"elements/com.squareup.kotlinpoet.classinspector.elements/-elements-class-inspector/supports-non-runtime-retained-annotations.html","searchKeys":["supportsNonRuntimeRetainedAnnotations","open override val supportsNonRuntimeRetainedAnnotations: Boolean = true","com.squareup.kotlinpoet.classinspector.elements.ElementsClassInspector.supportsNonRuntimeRetainedAnnotations"]}]
